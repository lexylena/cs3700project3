#!/usr/bin/python -u

import sys
import socket
import time
import datetime
import select
import json

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MTU = 1500
MSS = 1500 - 2*sys.getsizeof(int()) - 20   # MTU - header fields

TIMEOUT = 30
syn_num = None  # first sequence number
buffer = {}     # buffer for packets received out-of-order

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Expected sequence number
expected_sequence = None

# print data that comes next to stdout if it was buffered
def print_buffered_packets(seq):
    global expected_sequence
    next_data = buffer.get(seq, None)

    # if the expected seq num is buffered and if it hasn't already been printed
    if next_data and next_data != 1:
        # print the data
        sys.stdout.write(next_data)
        log("[unbuffered] " + str(seq))
        # set its data to 1, meaning it has been printed
        buffer[seq] = 1

        print_buffered_packets(seq + len(next_data))

    # if there's no buffered data left to be printed, expected_sequence should now be at seq
    else:
        expected_sequence = seq


################################## MAIN ##################################

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Listen for packets
while True:
    result = sock.recvfrom(MTU)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result

        try:
            decoded = json.loads(data)

            # SYN packet
            if (decoded['flags'] == 1):
                # record syn_num to be used for identifying duplicate data packets
                syn_num = decoded['seq_num'] + 1
                # increment expected sequence
                expected_sequence = syn_num
                # send SYN/ACK
                msg = json.dumps({"ack": decoded['seq_num']+1, "flags": 5})
                sock.sendto(msg, addr)

            # FIN packet
            if (decoded['flags'] == 2 and decoded['seq_num'] == expected_sequence):
                log("[completed] " + str(decoded))
                # send FIN/ACK and close connection
                msg = json.dumps({"ack": expected_sequence + 1, "flags": 6})
                sock.sendto(msg, addr)
                sys.exit(0)

            # If there is data, we accept it and print it out
            elif (decoded['data']):

                # received data in order
                if decoded['seq_num'] == expected_sequence:
                    log("[recv data] " + str(decoded['seq_num']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")

                    # print data to stdout
                    sys.stdout.write(decoded['data'])
                    expected_sequence += len(decoded['data'])

                    # add packet to buffer with value 1 to mark as already accepted and printed to stdout
                    buffer[decoded['seq_num']] = 1

                    # send ACK for received packet
                    log("[send ack] " + str(decoded['seq_num'] + len(decoded['data'])))
                    msg = json.dumps({"ack": decoded['seq_num'] + len(decoded['data']), "flags": 4})
                    if sock.sendto(msg, addr) < len(msg):
                        log("[error] unable to fully send packet")

                    # check buffer to see if can now print packets already received after after this one
                    print_buffered_packets(expected_sequence)


                # received data out-of-order
                elif decoded['seq_num'] > expected_sequence:
                    # buffer data until received packets that come before it
                    log("[recv data] " + str(decoded['seq_num']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (out-of-order)")
                    buffer[decoded['seq_num']] = decoded['data']

                    # send ACK to sender
                    msg = json.dumps({"ack": decoded['seq_num'] + len(decoded['data']), "flags": 4})
                    log("[send ack] " + str(decoded['seq_num'] + len(decoded['data'])))
                    if sock.sendto(msg, addr) < len(msg):
                        log("[error] unable to fully send packet")

                # received duplicate data
                elif buffer[decoded['seq_num']] == 1:
                    log("[recv data] " + str(decoded['seq_num']) + " (" + str(len(decoded['data'])) + ") IGNORED")

                    # resend ACK
                    msg = json.dumps({"ack": decoded['seq_num'] + len(decoded['data']), "flags": 4})
                    if sock.sendto(msg, addr) < len(msg):  # just resend ACK, ignore data
                        log("[error] unable to fully send packet")


        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e
    else:
        log("[error] timeout")
        sys.exit(-1)
