#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json
import random
MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE

  data = sys.stdin.read(DATA_SIZE)
  if (len(data) > 0):
    log("Sequence sent" + str(SEQUENCE))
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False, "syn": False})
    SEQUENCE += len(data)

    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True
  else:
    return False

# Send first packet
SEQUENCE = random.randint(0, 10)
msg = json.dumps({"syn": True, "sequence": SEQUENCE, "data": "", "ack": False, "eof": False})
log("About to send Syn")
sock.sendto(msg, dest)
#send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)
      if (decoded['syn'] and decoded['ack']):
	log("Connection establishing")
	msg = json.dumps({"ack": True, "syn": False, "eof": False, "data": "", "sequence": SEQUENCE})
	sock.sendto(msg, dest)
	SEQUENCE += 1

     #Add if to handle sequence +1 
	#If there is a lone ack, with the expected number, send the next packet
      if decoded['ack'] == SEQUENCE:
        log("[recv ack] " + str(SEQUENCE))

        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False, "syn": False}), dest)
sys.exit(0)
